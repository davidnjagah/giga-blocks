// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "giga-nft-model.dbml"
  projectName         = "GIGA NFT 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "GIGA NFT 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Role {
  ADMIN
  USER
  VALIDATOR
  CONTRIBUTOR
  PENDING
}

enum Permissions {
  READ
  WRITE
  UPDATE
  DELETE
  MANAGE
  SEASON_WRITE
  SEASON_READ
  SEASON_UPDATE
  SEASON_DELETE
  SCHOOL_UPDATE
  SCHOOL_READ
  VALIDATOR_ADD
  VALIDATOR_UPDATE
  VALIDATOR_DELETE
  DATA_VALID
  USER_UPDATE
  DATA_CONTRIBUTE
  DATA_VOTE
}

enum TxStatus {
  NEW
  PENDING
  SUCCESS
  FAIL
  ERROR
}

enum VOTE_TYPE {
  UPVOTE
  DOWNVOTE
}

enum SchoolStatus {
  Open
  Closed
}

enum Type {
  Private
  Public
}

enum Level {
  Primary
  Secondary
  Higher_Secondary
  Unkown
}

enum Status {
  Validated
  Rejected
  Pending
}

enum LeaderBoardType {
  SEASONAL
  GLOBAL
  GENERAL
}

enum Season_Status {
  Start
  Completed
  Suspended
}

enum ContributionType {
  VOTE
  CONTRIBUTE
}

model Auth {
  id           String    @id @default(uuid())
  otp          String    @unique
  refreshToken String?
  accessToken  String?
  user         User      @relation(fields: [id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Roles {
  role_id     String        @id @default(uuid())
  permissions Permission[]
  name        Role          @unique
 // User        User[]  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?  
  isArchived  Boolean       @default(false)  


  @@map(name: "giga_roles")
}

model Permission {
  permission_id String        @id @default(uuid())
  action        Permissions   @unique
  subject       String
  conditions    String
  reason        String
  role_id       String
  Roles         Roles         @relation(fields: [role_id], references: [role_id]) 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  isArchived    Boolean       @default(false)

  @@map(name: "giga_permissions")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  txHash          Bytes    @unique
  txStatus        TxStatus @default(NEW)
  contractName    String?
  contractAddress String?
  timestamp       Int?
  method          String?
  methodParams    Json[]
  blockNumber     Int?
  from            String?
  to              String?
  value           String?
  remarks         String?
  events          Json[]

  @@map(name: "giga_transactions")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  walletAddress   Bytes?            @unique
  profileImage    String?
  isActive        Boolean           @default(true)
  isBlocked       Boolean           @default(false)
  lastLoggedIn    DateTime?         @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  ContributedData ContributedData[]
  Points          Points[]          @relation("UserID")
  CreatedBy       Points[]          @relation("Creator")
  Auth            Auth[]
  roles           Role[]
  isArchived      Boolean           @default(false)
  vote            Vote[]            @relation("UserId")
  createdBy       Vote[]            @relation("Creator")

  @@map("giga_users")
}

model School {
  school_id             String       @id @default(uuid())
  giga_id_school        String       @unique
  school_status         SchoolStatus @default(Open)
  education_level       Level        @default(Unkown)
  physical_address      String?
  name                  String
  teachers              Int?
  class_rooms           Int?
  computer_lab          Boolean      @default(false)
  electricity_available Boolean      @default(false)
  connectivity_status   Boolean      @default(false)
  school_website        String?
  email_contact         String?
  phone_number          String?
  country_id            Int
  twiter_handle         String?
  youtube               String?
  daily_check_app       Boolean      @default(true)
  computers             Int?
  lon                   Float
  lat                   Float
  location              String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  deletedAt             DateTime?
  season_Id             String?
  contributedSeason     Season?      @relation(fields: [season_Id], references: [season_id])
  isArchived            Boolean      @default(false)

  @@map("giga_school")
}

model ContributedData {
  contributed_UUID  String    @id @default(uuid())
  contributed_data  Json    
  status            Status    @default(Pending)
  school_Id         String?
  contributedUserId String
  contributedUser   User      @relation(fields: [contributedUserId], references: [id])
  season_ID         String
  contributedSeason Season    @relation(fields: [season_ID], references: [season_id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? 
  isArchived        Boolean   @default(false)
  points            Points[]  
  vote              Vote[]

  @@map("giga_contributed_data")
}

model Season {
  season_id         String            @id @default(uuid())
  season_name       String
  season_start_date DateTime?
  season_end_date   DateTime?
  season_status     Season_Status     @default(Start)
  ContributedData   ContributedData[]
  Points            Points[]
  School            School[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  isArchived        Boolean           @default(false)

  @@map("giga_season")
}

model Points {
  id               Int              @id @default(autoincrement())
  points           Int
  leaderBoardType  LeaderBoardType
  contributionType ContributionType
  isConfirmed      Boolean?
  isValid          Boolean?
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt
  deletedAt        DateTime?
  season_id        String?
  season           Season?          @relation(fields: [season_id], references: [season_id])
  createdBy        String?
  creator          User?            @relation("Creator", fields: [createdBy], references: [id])
  user_id          String
  user             User             @relation("UserID", fields: [user_id], references: [id])
  isArchived       Boolean          @default(false)
  contributedDataId String?
  contributedData  ContributedData? @relation(fields: [contributedDataId], references: [contributed_UUID])

  @@map("giga_points")
}

model Vote {
  vote_id          String            @id @default(uuid())
  vote_type        VOTE_TYPE
  user_id          String
  user             User              @relation("UserId",fields: [user_id], references: [id])
  contributed_Id   String
  contributedData  ContributedData   @relation(fields: [contributed_Id], references: [contributed_UUID])
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  deletedAt        DateTime?
  isArchived       Boolean           @default(false)
  createdBy        String
  creator          User            @relation("Creator", fields: [createdBy], references: [id])

  @@unique([user_id, contributed_Id], name: "giga_vote_contributed_Id")
  @@map("giga_vote")
}


