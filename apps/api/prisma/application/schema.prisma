// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/@prisma/application"
}

datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "giga-nft-model.dbml"
  projectName         = "GIGA NFT 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "GIGA NFT 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Role {
  ADMIN
  USER
  VALIDATOR
  CONTRIBUTOR
  PENDING
}

enum Permissions {
  READ
  WRITE
  UPDATE
  DELETE
  MANAGE
  SEASON_WRITE
  SEASON_READ
  SEASON_UPDATE
  SEASON_DELETE
  SCHOOL_UPDATE
  SCHOOL_READ
  VALIDATOR_ADD
  VALIDATOR_UPDATE
  VALIDATOR_DELETE
  DATA_VALID
  USER_UPDATE
  DATA_CONTRIBUTE
  DATA_VOTE
}

enum VOTE_TYPE {
  UPVOTE
  DOWNVOTE
}

enum SchoolStatus {
  Open
  Closed
}

enum Type {
  Private
  Public
}

enum Level {
  Primary
  Secondary
  Higher_Secondary
  Unkown
}

enum Status {
  Validated
  Rejected
  Pending
}

enum LeaderBoardType {
  SEASONAL
  GLOBAL
  GENERAL
}

enum Season_Status {
  Start
  Completed
  Suspended
}

enum ContributionType {
  VOTE
  CONTRIBUTE
}

enum MintStatus {
  NOTMINTED
  MINTED
  ISMINTING
}

model Auth {
  id           String    @id @default(uuid())
  otp          String    @unique
  refreshToken String?
  accessToken  String?
  user         User      @relation(fields: [id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Roles {
  role_id     String       @id @default(uuid())
  permissions Permission[]
  name        Role         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  isArchived  Boolean      @default(false)

  @@map(name: "giga_roles")
}

model Permission {
  id         String      @id @default(uuid())
  action     Permissions @unique
  subject    String
  conditions String
  reason     String
  role_id    String
  Roles      Roles       @relation(fields: [role_id], references: [role_id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  isArchived Boolean     @default(false)

  @@map(name: "giga_permissions")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  walletAddress   Bytes?            @unique
  profileImage    String?
  isActive        Boolean           @default(true)
  isBlocked       Boolean           @default(false)
  lastLoggedIn    DateTime?         @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  ContributedData ContributedData[]
  Points          Points[]          @relation("UserID")
  CreatedBy       Points[]          @relation("Creator")
  Auth            Auth[]
  roles           Role[]
  schools         School[]
  isArchived      Boolean           @default(false)
  vote            Vote[]            @relation("UserId")
  createdBy       Vote[]            @relation("Creator")

  @@map("giga_users")
}

model School {
  id                        String       @id @default(uuid())
  status                    SchoolStatus @default(Open)
  connectivity_speed_status String?      @default("Data Unavailable")
  connectivity              Boolean      @default(false)
  name                      String
  school_type               String
  class_rooms               Int?
  electricity_available     Boolean      @default(false)
  website                   String?
  email                     String?
  phone_number              String?
  country                   String
  twiter_handle             String?
  wikipedia                 String?
  googlemap                 String?
  youtube                   String?
  longitude                 Float
  latitude                  Float
  minted                    MintStatus   @default(NOTMINTED)
  coverage_availability     String
  coverage_2G               Boolean      @default(false)
  coverage_3G               Boolean      @default(false)
  coverage_4G               Boolean      @default(false)
  hasSatteliteBuilding      Boolean      @default(false)
  connection_type           String?
  connectivity_speed        Int?
  internet_links            Int?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  deletedAt                 DateTime?
  season_Id                 String?
  createdBy                 User?        @relation(fields: [createdById], references: [id])
  createdById               String?
  contributedSeason         Season?      @relation(fields: [season_Id], references: [id])
  isArchived                Boolean      @default(false)
  uploadId                  String?

  @@map("giga_school")
}

model ContributedData {
  id                String    @id @default(uuid())
  contributed_data  Json
  status            Status    @default(Pending)
  school_Id         String
  school            School    @relation(fields: [school_Id], references: [id])
  contributedUserId String
  contributedUser   User      @relation(fields: [contributedUserId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  isArchived        Boolean   @default(false)
  points            Points[]
  vote              Vote[]

  @@map("giga_contributed_data")
}

model Season {
  id                String            @id @default(uuid())
  season_name       String
  season_start_date DateTime?
  season_end_date   DateTime?
  season_status     Season_Status     @default(Start)
  ContributedData   ContributedData[]
  Points            Points[]
  School            School[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  isArchived        Boolean           @default(false)

  @@map("giga_season")
}

model CSVUpload {
  id         String   @id @default(uuid())
  uploadedBy String
  fileValue  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("giga_csv_uploads")
}

model Points {
  id                Int              @id @default(autoincrement())
  points            Int
  leaderBoardType   LeaderBoardType
  contributionType  ContributionType
  isConfirmed       Boolean?
  isValid           Boolean?
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt
  deletedAt         DateTime?
  season_id         String?
  season            Season?          @relation(fields: [season_id], references: [id])
  createdBy         String?
  creator           User?            @relation("Creator", fields: [createdBy], references: [id])
  user_id           String
  user              User             @relation("UserID", fields: [user_id], references: [id])
  isArchived        Boolean          @default(false)
  contributedDataId String?
  contributedData   ContributedData? @relation(fields: [contributedDataId], references: [id])

  @@map("giga_points")
}

model Vote {
  vote_id         String          @id @default(uuid())
  vote_type       VOTE_TYPE
  user_id         String
  user            User            @relation("UserId", fields: [user_id], references: [id])
  contributed_Id  String
  contributedData ContributedData @relation(fields: [contributed_Id], references: [id])
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt
  deletedAt       DateTime?
  isArchived      Boolean         @default(false)
  createdBy       String
  creator         User            @relation("Creator", fields: [createdBy], references: [id])

  @@unique([user_id, contributed_Id], name: "giga_vote_contributed_Id")
  @@map("giga_vote")
}

model validatedData {
  id         String    @id @default(uuid())
  school_Id  String    @unique
  school     School    @relation(fields: [school_Id], references: [id])
  data       Json
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?
  isArchived Boolean   @default(false)

  @@map("giga_validated_data")
}
