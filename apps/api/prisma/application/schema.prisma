// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/@prisma/application"
}

datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "giga-nft-model.dbml"
  projectName         = "GIGA NFT 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "GIGA NFT 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Role {
  ADMIN
  CONTRIBUTOR
}

enum Permissions {
  READ
  WRITE
  UPDATE
  DELETE
  MANAGE
  SCHOOL_UPDATE
  SCHOOL_READ
  DATA_VALID
  USER_UPDATE
  DATA_CONTRIBUTE
}

enum SchoolStatus {
  Open
  Closed
}

enum Type {
  Private
  Public
}

enum Level {
  Primary
  Secondary
  Higher_Secondary
  Unkown
}

enum Status {
  Validated
  Rejected
  Pending
}

enum ContributionType {
  VOTE
  CONTRIBUTE
}

enum MintStatus {
  NOTMINTED
  MINTED
  ISMINTING
}

model Auth {
  id           String    @id @default(uuid())
  otp          String    @unique
  refreshToken String?
  accessToken  String?
  user         User      @relation(fields: [id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model Roles {
  role_id     String       @id @default(uuid())
  permissions Permission[]
  name        Role         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  isArchived  Boolean      @default(false)

  @@map(name: "giga_roles")
}

model Permission {
  id         String      @id @default(uuid())
  action     Permissions @unique
  subject    String
  conditions String
  reason     String
  role_id    String
  Roles      Roles       @relation(fields: [role_id], references: [role_id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  isArchived Boolean     @default(false)

  @@map(name: "giga_permissions")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  walletAddress   Bytes?            @unique
  profileImage    String?
  isActive        Boolean           @default(true)
  isBlocked       Boolean           @default(false)
  lastLoggedIn    DateTime?         @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  ContributedData ContributedData[]
  ValidatedUser   ContributedData[] @relation("ValidatedBy")
  ApprovedBy      ContributedData[] @relation("ApprovedBy")
  Auth            Auth[]
  roles           Role[]
  schools         School[]
  schoolUpdatedBy School[]          @relation("UpdatedBy")
  isArchived      Boolean           @default(false)
  validatedBy     validatedData[]   @relation("ApprovedBy")
  OTP             OTP[]

  @@map("giga_users")
}

model School {
  id                        String            @id @default(uuid())
  giga_school_id            String            @unique
  status                    SchoolStatus      @default(Open)
  connectivity_speed_status String?           @default("Data Unavailable")
  connectivity              Boolean           @default(false)
  name                      String
  school_type               String
  class_rooms               Int?
  electricity_available     Boolean           @default(false)
  website                   String?
  email                     String?
  phone_number              String?
  country                   String
  twiter_handle             String?
  wikipedia                 String?
  googlemap                 String?
  youtube                   String?
  longitude                 Float
  latitude                  Float
  minted                    MintStatus        @default(NOTMINTED)
  coverage_availability     Boolean           @default(false)
  coverage_2G               Boolean           @default(false)
  coverage_3G               Boolean           @default(false)
  coverage_4G               Boolean           @default(false)
  hasSatteliteBuilding      Boolean           @default(false)
  connection_type           String?
  connectivity_speed        Int?
  internet_links            Int?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  deletedAt                 DateTime?
  createdBy                 User?             @relation(fields: [createdById], references: [id])
  createdById               String?
  isArchived                Boolean           @default(false)
  updatedBy                 String?
  updatedUser               User?             @relation("UpdatedBy", fields: [updatedBy], references: [id])
  uploadId                  String?
  uploadBatch               CSVUpload?        @relation(fields: [uploadId], references: [id])
  validatedData             validatedData[]
  ContributedData           ContributedData[]

  @@map("giga_school")
}

model ContributedData {
  id                String    @id @default(uuid())
  contributed_data  Json
  status            Status    @default(Pending)
  school_Id         String
  school            School    @relation(fields: [school_Id], references: [id])
  contributedUserId String
  contributedUser   User      @relation(fields: [contributedUserId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  approvedBy        String?
  approved          User?     @relation("ApprovedBy", fields: [approvedBy], references: [id])
  deletedAt         DateTime?
  approvedAt        DateTime?
  isArchived        Boolean   @default(false)
  validatedBy       String?
  validatedAt       DateTime?
  validatedUser     User?     @relation("ValidatedBy", fields: [validatedBy], references: [id])

  @@map("giga_contributed_data")
}

model CSVUpload {
  id         String   @id @default(uuid())
  uploadedBy String
  fileValue  Json
  fileName   String
  school     School[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("giga_csv_uploads")
}

model validatedData {
  id               String    @id @default(uuid())
  school_Id        String
  school           School    @relation(fields: [school_Id], references: [id])
  data             Json
  approvedStatus   Boolean   @default(false)
  inProgressStatus Boolean   @default(false)
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?
  approvedBy       String?
  approved         User?     @relation("ApprovedBy", fields: [approvedBy], references: [id])
  approvedAt       DateTime?
  contributed_data String[]
  isArchived       Boolean   @default(false)

  @@map("giga_validated_data")
}

model OTP {
  id             String    @id @default(uuid())
  otp            String    @unique
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  validated      Boolean   @default(false)
  expirationTime DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("giga_otp")
}
